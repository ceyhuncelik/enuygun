{"version":3,"sources":["logo.svg","paths.js","constants/serviceConstants.js","thunks/serviceMiddleware.js","actions/serviceAction.js","selector.js","containers/Home/index.js","containers/About/index.js","App.js","reducers/serviceReducer.js","configureStore.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","API_SEARCH","TV_SHOW_FETCHING","TV_SHOW_FETCH_SUCCESS","TV_SHOW_FETCH_FAILURE","fetchTvShows","key","arguments","length","undefined","filterValue","newUrl","filterValues","tamp","Object","keys","forEach","setQuery","dispatch","type","fetch","then","response","ok","Error","statusText","json","item","tvShowFetchSuccess","catch","error","tvShowFetchFailure","serviceReducerToJS","store","serviceReducer","toJS","Home","testRedux","_this","props","q","_this2","this","console","log","react_default","a","createElement","className","src","logo","alt","href","target","rel","onClick","Link","to","Component","connect","About","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","query","match","params","history","goBack","App","Switch","Route","exact","path","component","initialState","fromJS","test","index","loading","createStore","combineReducers","action","merge","result","payload","value","tampState","objectSpread","composeWithDevTools","applyMiddleware","thunk","configureStore","Boolean","window","location","hostname","d","__webpack_exports__","AppStore","ReactDOM","render","BrowserRouter","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd934ea4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const API_SEARCH = 'http://api.tvmaze.com/search/shows?';\r\nexport const API_SINGLE_SEARCH = 'http://api.tvmaze.com/singlesearch/shows?';\r\n","\r\n/*\r\n  aksiyon sabitleri\r\n*/\r\n\r\nexport const TV_SHOW_FETCHING = 'enuygun/TV_SHOW_FETCHING';\r\nexport const TV_SHOW_FETCH_SUCCESS = 'enuygun/TV_SHOW_FETCH_SUCCESS';\r\nexport const TV_SHOW_FETCH_FAILURE = 'enuygun/TV_SHOW_FETCH_FAILURE';\r\n","\r\n\r\n// export function itemsFetchData(url) {\r\n//     return (dispatch) => {\r\n//         dispatch(itemsIsLoading(true));\r\n//         fetch(url)\r\n//             .then((response) => {\r\n//                 if (!response.ok) {\r\n//                     throw Error(response.statusText);\r\n//                 }\r\n//                 return response;\r\n//             })\r\n//             .then((response) => response.json())\r\n//             .then((items) => dispatch(itemsFetchDataSuccess(items)))\r\n//             .catch(() => dispatch(itemsHasErrored(true)));\r\n//     };\r\n// }\r\n\r\nimport { API_SEARCH } from 'paths';\r\n\r\nimport {\r\n  tvShowsFetching,\r\n  tvShowFetchSuccess,\r\n  tvShowFetchFailure,\r\n} from 'actions/serviceAction';\r\n\r\nexport function fetchTvShows(key = 'batmanShowList', filterValue = {}, url = API_SEARCH) {\r\n\r\n  const newUrl = url + setQuery(filterValue);\r\n  return (dispatch) => {\r\n    dispatch(tvShowsFetching());\r\n    fetch(newUrl) // options'a gerek yok\r\n      .then((response) => {\r\n        if (!response.ok) { throw Error(response.statusText); }\r\n        else { return response; }\r\n      })\r\n      .then(response => response.json()) // responsu parse ediyor\r\n      .then((item) => dispatch(tvShowFetchSuccess(key, item)))\r\n      .catch((error) => dispatch(tvShowFetchFailure(error)));\r\n  };\r\n}\r\n\r\n\r\nfunction setQuery(filterValues) {\r\n  let tamp = '';\r\n  Object.keys(filterValues).forEach((key) => {\r\n    tamp += (key +'='+ filterValues[key]);\r\n  });\r\n  return tamp;\r\n}\r\n// burada gelen bütün parameteleri path query olarak ekleten bir sey yzmak gerek\r\n// hadi bakalım\r\n","import {\r\n  TV_SHOW_FETCHING,\r\n  TV_SHOW_FETCH_SUCCESS,\r\n  TV_SHOW_FETCH_FAILURE,\r\n} from 'constants/serviceConstants';\r\n\r\nexport const simpleAction = () => dispatch => {\r\n dispatch({\r\n  type: 'SIMPLE_ACTION',\r\n  payload: 'result_of_simple_action'\r\n })\r\n}\r\n\r\n\r\nexport function toggleTodo(index) {\r\n  return { type: 'TOGGLE_TODO', index };\r\n}\r\n\r\nexport function denemeAction(key, value) {\r\n  return {\r\n    type: 'DENEME_ACTION',\r\n    key,\r\n    value,\r\n  };\r\n}\r\n\r\n\r\n// ---\r\nexport function tvShowsFetching() {\r\n  return {\r\n    type: TV_SHOW_FETCHING,\r\n  };\r\n}\r\nexport function tvShowFetchSuccess(key, response) {\r\n  return {\r\n    type: TV_SHOW_FETCH_SUCCESS,\r\n    key,\r\n    response,\r\n  };\r\n}\r\nexport function tvShowFetchFailure(error) {\r\n  return {\r\n    type: TV_SHOW_FETCH_FAILURE,\r\n    error,\r\n  };\r\n}\r\n","export function serviceReducerToJS(store) {\r\n  return store.serviceReducer.toJS();\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport logo from 'logo.svg';\r\nimport { fetchTvShows } from 'thunks/serviceMiddleware'\r\nimport { serviceReducerToJS } from 'selector';\r\n// import { convertToJS } from './selectors/serviceSelector';\r\n\r\nimport { API_SEARCH } from 'paths';\r\n\r\nclass Home extends Component {\r\n  testRedux = () => {\r\n    // this.props.simpleAction();\r\n    this.props.dispatch(fetchTvShows('batmanTvShowList', { q: 'batman' }, API_SEARCH));\r\n    // this.props.dispatch(denemeAction('key','value'));\r\n  }\r\n  render() {\r\n    console.log(this.props.serviceReducer, 'hadi bakalım hayrlısı');\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>\r\n            Edit <code>src/App.js</code> and save to reload.\r\n          </p>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://reactjs.org\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Learn React\r\n          </a>\r\n          <button onClick={() => this.testRedux()}>Test Redux</button>\r\n          <Link to={'/about/'+'batman'}> Test Route to about page </Link>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n dispatch,\r\n})\r\nconst mapStateToProps = store => ({\r\n  serviceReducer: serviceReducerToJS(store)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n\r\n\r\n// listeleme sayfası\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchTvShows } from 'thunks/serviceMiddleware'\r\nimport { serviceReducerToJS } from 'selector';\r\n// import { convertToJS } from './selectors/serviceSelector';\r\nimport { API_SINGLE_SEARCH } from 'paths';\r\nclass About extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      query: this.props.match.params.query || null,\r\n    }\r\n  }\r\n  componentWillMount() {\r\n    this.props.dispatch(fetchTvShows(this.state.query, { q: this.state.query }, API_SINGLE_SEARCH));\r\n  }\r\n\r\n  render() {\r\n    console.log(this.props, 'hadi bakalım hayrlısı');\r\n    return (\r\n      <div className=\"about-page-wraper\">\r\n        <button onClick={() => this.props.history.goBack()}> --------------- ana sayfaya dön --------------</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n dispatch,\r\n})\r\nconst mapStateToProps = (store) => ({\r\n  serviceReducer: serviceReducerToJS(store)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(About);\r\n\r\n\r\n// burada ufak bir sorunumuz var\r\n// anlamıs degılım acaba baska bir reducer eklememiz falan mı gerekiyor\r\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Home from 'containers/Home';\nimport About from 'containers/About';\n\nclass App extends Component {\n  render() {\n    return(\n      <div>\n        <Switch>\n          <Route exact path='/' component={Home}/>\n          <Route exact path='/about/:query' component={About}/>\n        </Switch>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n\n// yönlendirme islemleri\n","import { fromJS } from 'immutable';\r\n// store erisimini kısıtlamak icin immutabledan faydalanıldı.\r\n\r\nimport {\r\n  TV_SHOW_FETCHING,\r\n  TV_SHOW_FETCH_SUCCESS,\r\n  TV_SHOW_FETCH_FAILURE,\r\n} from 'constants/serviceConstants';\r\n\r\nexport const initialState = fromJS({\r\n  test: '',\r\n  index: 0,\r\n  // ---\r\n  loading: false,\r\n});\r\n\r\nexport default (state = initialState, action) => {\r\n switch (action.type) {\r\n  case 'SIMPLE_ACTION': {\r\n    return state.merge({\r\n      result: action.payload\r\n    });\r\n  }\r\n\r\n  case 'TOGGLE_TODO': {\r\n    const { index} = action;\r\n    return state.merge({\r\n        index,\r\n    });\r\n  }\r\n  case 'DENEME_ACTION': {\r\n    const { key, value } = action;\r\n    const tampState = state.toJS();\r\n    tampState[key] = value;\r\n    return state.merge({\r\n      ...tampState,\r\n    });\r\n  }\r\n\r\n  // -------\r\n  case TV_SHOW_FETCHING: {\r\n    return state.merge({\r\n      loading: true,\r\n    });\r\n  }\r\n  case TV_SHOW_FETCH_SUCCESS: {\r\n    const { key, response } = action;\r\n    const tampState = state.toJS();\r\n    tampState[key] = response;\r\n    // reducer dolayısıyla aksiyonları daha dinamik hale getirmek icin !\r\n    // bu study case de pek gerekli olmasada her zaman daha fazla kolaylık saglayacaktır\r\n    return state.merge({\r\n      ...tampState,\r\n      loading: false,\r\n    });\r\n  }\r\n  case TV_SHOW_FETCH_FAILURE: {\r\n    const { error } = action;\r\n    return state.merge({\r\n      error,\r\n      loading: false,\r\n    });\r\n  }\r\n  default:\r\n   return state\r\n }\r\n}\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { combineReducers } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport serviceReducer from 'reducers/serviceReducer';\r\n\r\nconst store = createStore(\r\n  combineReducers({ serviceReducer }),\r\n  composeWithDevTools(\r\n    applyMiddleware(thunk)\r\n  )\r\n);\r\nexport default function configureStore(initialState={}) {\r\n // return createStore(\r\n //   combineReducers({ serviceReducer }),\r\n //   applyMiddleware(thunk)\r\n // );\r\n return store;\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport './globalStyles';\nimport { BrowserRouter } from 'react-router-dom';\nimport configureStore from './configureStore';\nimport * as serviceWorker from './serviceWorker';\n\nexport const AppStore = configureStore();\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={configureStore()}>\n      <App />\n    </Provider>\n  </BrowserRouter>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}